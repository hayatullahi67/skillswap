import type { PeerClient } from "./peerClient";
import { getSocket } from "./socket";

export class SocketSignaling {
  private peerClient: PeerClient;
  public socket = getSocket(); // Make socket public for debugging
  private initialized = false;

  constructor(peerClient: PeerClient) {
    this.peerClient = peerClient;
  }

  initialize() {
    if (this.initialized) return;

    console.log('🔌 Initializing Socket.IO signaling for peer:', this.peerClient.getMyPeerId());

    // register my peer id on connect and reconnect
    const register = () => {
      const myPeerId = this.peerClient.getMyPeerId();
      console.log('📝 Registering peer ID with socket server:', myPeerId);
      this.socket.emit("register", myPeerId);
    };

    this.socket.on("connect", () => {
      console.log('✅ Socket.IO connected to server');
      register();
    });

    this.socket.on("disconnect", () => {
      console.log('❌ Socket.IO disconnected from server');
    });

    this.socket.on("registered", ({ peerId, socketId }) => {
      console.log('✅ Registration confirmed:', peerId, 'socketId:', socketId);
    });

    this.socket.on("error", (error) => {
      console.error('❌ Socket.IO error:', error);
    });

    if (this.socket.connected) {
      console.log('✅ Socket already connected, registering immediately');
      register();
    } else {
      console.log('⏳ Socket not connected yet, will register on connect');
    }

    // send out signals generated by SimplePeer
    this.peerClient.onSignal((peerId, signalData) => {
      console.log('📡 Sending signal via Socket.IO:', {
        to: peerId,
        from: this.peerClient.getMyPeerId(),
        type: signalData.type
      });
      
      this.socket.emit("signal", {
        to: peerId,
        from: this.peerClient.getMyPeerId(),
        data: signalData,
      });
    });

    // receive signals from remote
    this.socket.on("signal", ({ from, data }) => {
      console.log('📡 Received signal via Socket.IO:', {
        from,
        to: this.peerClient.getMyPeerId(),
        type: data.type
      });
      
      this.peerClient.handleIncomingSignal(from, data);
    });

    this.initialized = true;
    console.log('✅ Socket.IO signaling initialized');
  }

  async callPeer(remotePeerId: string) {
    console.log('📞 Calling peer via Socket.IO signaling:', remotePeerId);
    // creates initiator peer; SimplePeer will emit 'signal'→socket will relay
    await this.peerClient.createConnection(remotePeerId);
  }

  // Debug method to test Socket.IO connection
  testConnection() {
    console.log('🧪 Testing Socket.IO connection:', {
      connected: this.socket.connected,
      id: this.socket.id,
      transport: this.socket.io?.engine?.transport?.name,
      initialized: this.initialized
    });

    if (this.socket.connected) {
      // Test sending a signal
      this.socket.emit('signal', {
        to: 'test-peer',
        from: this.peerClient.getMyPeerId(),
        data: { type: 'test', message: 'Hello from ' + this.peerClient.getMyPeerId() }
      });
      console.log('🧪 Test signal sent');
    } else {
      console.log('❌ Socket not connected, cannot send test signal');
    }
  }
}