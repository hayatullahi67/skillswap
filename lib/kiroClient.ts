// kiroClient.ts
export class KiroClient {
  private baseUrl: string;

  constructor() {
    this.baseUrl = process.env.NEXT_PUBLIC_KIRO_API_URL || '/api';
    console.log("ü§ñ KiroClient - Ready to use API routes");
  }

  private convertAnalysisToTutorial(analysisData: any, skillName: string, userLevel: string) {
    // This method is deprecated - all tutorials are now generated dynamically by AI
    // Keeping for backward compatibility but should not be used
    console.warn('‚ö†Ô∏è convertAnalysisToTutorial is deprecated - use generateTutorial instead');
    
    return {
      title: `AI Tutorial: ${skillName}`,
      description: `Dynamically generated learning content for ${skillName}`,
      estimatedTime: "Generated by AI",
      difficulty: userLevel,
      totalSteps: 0,
      steps: []
    };
  }

  // Generate complete tutorial with AI
  async generateTutorial(skillName: string, userLevel: string = "beginner") {
    console.log(`üéì Generating AI tutorial for "${skillName}" at ${userLevel} level...`);

    try {
      const response = await fetch(`${this.baseUrl}/ai-tutorial`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'generate-tutorial',
          skill: skillName,
          level: userLevel
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const tutorialData = await response.json();
      console.log("‚úÖ AI tutorial generated successfully");
      return tutorialData;

    } catch (error) {
      console.error("‚ùå Tutorial generation failed:", error);
      throw error;
    }
  }

  async analyzeSkill(skillName: string, level: string = "beginner") {
    console.log(`ü§ñ Analyzing skill structure for "${skillName}" via API...`);

    try {
      const response = await fetch(`${this.baseUrl}/ai-tutorial`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'analyze',
          skill: skillName,
          level: level
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const analysisData = await response.json();
      console.log("‚úÖ Skill analysis completed successfully");
      return analysisData;

    } catch (error) {
      console.error("‚ùå Skill analysis failed:", error);
      throw error;
    }
  }

  async explainTopic(topic: any, skill: string, level: string, topicIndex: number, totalTopics: number) {
    console.log(`ü§ñ Explaining topic "${topic.name}" via API...`);

    try {
      const response = await fetch(`${this.baseUrl}/ai-tutorial`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'explain-topic',
          topic: topic,
          skill: skill,
          level: level,
          topicIndex: topicIndex,
          totalTopics: totalTopics
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const explanationData = await response.json();
      console.log("‚úÖ Topic explanation generated successfully");
      return explanationData;

    } catch (error) {
      console.error("‚ùå Topic explanation failed:", error);
      throw error;
    }
  }

  async askFollowUpQuestion(question: string, currentStep: any) {
    console.log(`ü§ñ Asking follow-up question via API...`);

    try {
      const response = await fetch(`${this.baseUrl}/ai-tutorial`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'followup',
          question: question,
          currentStep: currentStep
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      console.log("‚úÖ Follow-up response generated successfully");
      return data.response;

    } catch (error) {
      console.error("‚ùå AI follow-up generation failed:", error);
      throw error;
    }
  }

  async breakDownTopic(step: any, skill: string, level: string) {
    console.log(`üîç Breaking down complex topic: "${step.title}"...`);

    try {
      const response = await fetch(`${this.baseUrl}/ai-tutorial`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'break-down',
          step: step,
          skill: skill,
          level: level
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      console.log("‚úÖ Topic breakdown generated successfully");
      return data.simplifiedExplanation;

    } catch (error) {
      console.error("‚ùå Topic breakdown failed:", error);
      throw error;
    }
  }

  async generateDynamicQuiz(step: any, skill: string, level: string) {
    console.log(`üìù Generating dynamic quiz for: "${step.title}"...`);

    try {
      const response = await fetch(`${this.baseUrl}/ai-tutorial`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'generate-quiz',
          step: step,
          skill: skill,
          level: level
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      console.log("‚úÖ Dynamic quiz generated successfully");
      return data;

    } catch (error) {
      console.error("‚ùå Quiz generation failed:", error);
      throw error;
    }
  }

  async generateContextualQuiz(step: any, skill: string, level: string, conversationContext: string) {
    console.log(`üéØ Generating contextual quiz based on actual learning conversation...`);

    try {
      const response = await fetch(`${this.baseUrl}/ai-tutorial`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'contextual-quiz',
          step: step,
          skill: skill,
          level: level,
          conversationContext: conversationContext
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      console.log("‚úÖ Contextual quiz generated successfully");
      return data;

    } catch (error) {
      console.error("‚ùå Contextual quiz generation failed:", error);
      throw error;
    }
  }

  async generateFinalSummary(skill: string, level: string, completedSteps: number, totalTime: number) {
    console.log(`üéâ Generating final summary for ${skill}...`);

    try {
      const response = await fetch(`${this.baseUrl}/ai-tutorial`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'final-summary',
          skill: skill,
          level: level,
          completedSteps: completedSteps,
          totalTime: totalTime
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      console.log("‚úÖ Final summary generated successfully");
      return data.summary;

    } catch (error) {
      console.error("‚ùå Summary generation failed:", error);
      throw error;
    }
  }

  async generateLearningPlan(skill: string, level: string, learningGoal?: string) {
    console.log(`üéØ Generating personalized learning plan for "${skill}" at ${level} level...`);

    try {
      const response = await fetch(`${this.baseUrl}/onboarding`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          skill: skill,
          level: level,
          learningGoal: learningGoal
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const planData = await response.json();
      console.log("‚úÖ Learning plan generated successfully");
      return planData;

    } catch (error) {
      console.error("‚ùå Learning plan generation failed:", error);
      throw error;
    }
  }

  // AI Coding Methods
  async analyzeCode(code: string, language: string, context?: string) {
    console.log(`üîç Analyzing ${language} code...`);

    try {
      const response = await fetch(`${this.baseUrl}/ai-coding`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'analyzeCode',
          code: code,
          language: language,
          context: context
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const analysisData = await response.json();
      console.log("‚úÖ Code analysis completed successfully");
      return analysisData;

    } catch (error) {
      console.error("‚ùå Code analysis failed:", error);
      throw error;
    }
  }

  async suggestImprovements(code: string, language: string, focusArea?: string) {
    console.log(`üí° Suggesting improvements for ${language} code...`);

    try {
      const response = await fetch(`${this.baseUrl}/ai-coding`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'suggestImprovements',
          code: code,
          language: language,
          focusArea: focusArea
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const improvementData = await response.json();
      console.log("‚úÖ Improvements suggested successfully");
      return improvementData;

    } catch (error) {
      console.error("‚ùå Improvement suggestion failed:", error);
      throw error;
    }
  }

  async explainCode(code: string, language: string, selectedLine?: number, question?: string) {
    console.log(`üìö Explaining ${language} code...`);

    try {
      const response = await fetch(`${this.baseUrl}/ai-coding`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'explainCode',
          code: code,
          language: language,
          selectedLine: selectedLine,
          question: question
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const explanationData = await response.json();
      console.log("‚úÖ Code explanation generated successfully");
      return explanationData.explanation;

    } catch (error) {
      console.error("‚ùå Code explanation failed:", error);
      throw error;
    }
  }

  async generateCodeExample(description: string, language: string, difficulty?: string, includeComments?: boolean) {
    console.log(`üî® Generating ${language} code example...`);

    try {
      const response = await fetch(`${this.baseUrl}/ai-coding`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'generateExample',
          description: description,
          language: language,
          difficulty: difficulty || 'beginner',
          includeComments: includeComments !== false
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const exampleData = await response.json();
      console.log("‚úÖ Code example generated successfully");
      return exampleData;

    } catch (error) {
      console.error("‚ùå Code example generation failed:", error);
      throw error;
    }
  }

  async findBugs(code: string, language: string, context?: string) {
    console.log(`üêõ Finding bugs in ${language} code...`);

    try {
      const response = await fetch(`${this.baseUrl}/ai-coding`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'findBugs',
          code: code,
          language: language,
          context: context
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const bugData = await response.json();
      console.log("‚úÖ Bug analysis completed successfully");
      return bugData;

    } catch (error) {
      console.error("‚ùå Bug finding failed:", error);
      throw error;
    }
  }

  private convertTextToTutorial(text: string, skillName: string, userLevel: string) {
    // This method is deprecated - all tutorials are now generated dynamically by AI
    // Keeping for backward compatibility but should not be used
    console.warn('‚ö†Ô∏è convertTextToTutorial is deprecated - use generateTutorial instead');
    
    return {
      title: `AI Tutorial: ${skillName}`,
      description: `Dynamically generated learning content for ${skillName}`,
      estimatedTime: "Generated by AI",
      difficulty: userLevel,
      totalSteps: 0,
      steps: []
    };
  }

  private extractCodeExample(text: string) {
    const codeMatch = text.match(/```(\w+)?\n([\s\S]*?)```/);
    if (codeMatch) {
      return {
        language: codeMatch[1] || 'javascript',
        code: codeMatch[2].trim()
      };
    }
    return undefined;
  }

  private generateQuiz(content: string, stepIndex: number) {
    // This method is deprecated - all quizzes are now generated dynamically by AI
    // Keeping for backward compatibility but should not be used
    console.warn('‚ö†Ô∏è generateQuiz is deprecated - use generateContextualQuiz instead');
    
    return {
      question: "Quiz will be generated dynamically by AI",
      options: ["Dynamic", "Generation", "In", "Progress"],
      correctAnswer: 0,
      explanation: "All quizzes are now generated contextually by AI based on the actual learning conversation"
    };
  }
}

export const kiroClient = new KiroClient();
